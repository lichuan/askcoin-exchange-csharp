namespace Market.CurrencyManager.ConnectorApi
{
    /// <summary>
    /// A "connector" is a class that "teaches" our exchange how to communicate with the different
    /// coins. Those coins that share the same interface (e.g. clones like bitcoin and litecoin)
    /// can use the same connector.
    /// 
    /// More technically, a connector is a .NET class that implements the IConnector interface.
    /// </summary>
    public interface IConnector
    {
        /// <summary>
        /// Sets a ConnectorApi instance. This object exposes some helper methods that the connector
        /// can use. For more information see IConnectorApi.cs file.
        /// </summary>
        /// <param name="connectorApi">API object</param>
        void SetApi(IConnectorApi connectorApi);

        /// <summary>
        /// Returns a list of deposits. It must return pending and confirmed deposits. Ideally confirmed deposits
        /// should be returned only once, but if they are returned multiple times then it's okay (i.e. they won't be
        /// credited multiple times). Pending deposits can be returned in multiple invocations until they become confirmed.
        /// BatchId is an identifier that is passed between calls to ListDeposits. Each call includes the last returned
        /// BatchId (as part of DepositList object). It can be any string, but it usually is the block ID of the last
        /// processed block.
        /// </summary>
        /// <returns>Batch ID of the previous call, or null on the first time</returns>
        DepositList ListDeposits(string batchId);

        /// <summary>
        /// Unlocks the wallet to send
        /// </summary>
        /// <param name="key">Current key</param>
        void Unlock(string key);

        /// <summary>
        /// Locks the wallets
        /// </summary>
        void Lock();

        /// <summary>
        /// Changes the encryption key
        /// </summary>
        /// <param name="key">Current key, or null if wallet is not encrypted yet</param>
        /// <param name="newKey">New key</param>
        void ChangeKey(string key, string newKey);

        /// <summary>
        /// Verifies if a given string is a valid address
        /// </summary>
        /// <param name="address">Address to check</param>
        /// <returns>True if address is valid, False otherwise</returns>
        bool IsAddressValid(string address);

        /// <summary>
        /// Sends a given amount to a destination address, and returns transaction ID (hash)
        /// </summary>
        /// <param name="address">Destination address</param>
        /// <param name="amount">Amount to send</param>
        /// <returns>Transaction ID</returns>
        string SendTo(string address, decimal amount);

        /// <summary>
        /// Returns the fees consumed by a given transaction ID. It is always called for a transaction
        /// generated by this wallet (e.g. previously returned by SendTo)
        /// </summary>
        /// <param name="txId">Transaction ID</param>
        /// <returns>Fees</returns>
        decimal GetTransactionFees(string txId);

        /// <summary>
        /// Generates a new deposit address
        /// </summary>
        /// <returns>New deposit address</returns>
        string GenerateAddress();

        /// <summary>
        /// Verifies if the wallet is currently encrypted
        /// </summary>
        /// <returns>True if wallet is encrypted, False otherwise</returns>
        bool IsEncrypted();

        /// <summary>
        /// Returns when the wallet is reachable and working properly. If server
        /// is not reachable then simply throw an exception instead of waiting.
        /// </summary>
        void Ping();

        /// <summary>
        /// Returns information regarding the wallet
        /// </summary>
        /// <returns>Wallet info</returns>
        Info GetInfo();

        /// <summary>
        /// Returns the number of confirmations required to confirm deposits
        /// </summary>
        /// <returns>Confirmations required</returns>
        int GetRequiredConfirmations();
    }
}
